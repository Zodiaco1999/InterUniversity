// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityApi.DataAccess.Context;

#nullable disable

namespace UniversityApi.Migrations
{
    [DbContext(typeof(UniversidadContext))]
    [Migration("20241209171414_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UniversityApi.DataAccess.Clase", b =>
                {
                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.HasKey("ProfesorId", "EstudianteId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("MateriaId", "ProfesorId");

                    b.ToTable("Clase", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Credito", b =>
                {
                    b.Property<int>("CreditoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditoId"));

                    b.Property<byte>("Creditos")
                        .HasColumnType("tinyint");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CreditoId");

                    b.ToTable("Credito", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Estudiante", b =>
                {
                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<byte>("Creditos")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("FechaInscrito")
                        .HasColumnType("smalldatetime");

                    b.HasKey("EstudianteId")
                        .HasName("PK_Estudiante_1");

                    b.ToTable("Estudiante", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Materia", b =>
                {
                    b.Property<int>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MateriaId"));

                    b.Property<byte>("Creditos")
                        .HasColumnType("tinyint");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materia", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.MateriaProfesor", b =>
                {
                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("MateriaId", "ProfesorId")
                        .HasName("PK_MateriaProfesor_1");

                    b.HasIndex("ProfesorId");

                    b.ToTable("MateriaProfesor", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Profesor", b =>
                {
                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ProfesorId")
                        .HasName("PK_Profesor_1");

                    b.ToTable("Profesor", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UsuarioId");

                    b.HasIndex(new[] { "NumeroIdentificacion" }, "UQ__Usuario__FCA68D9105274D61")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Clase", b =>
                {
                    b.HasOne("UniversityApi.DataAccess.Estudiante", "Estudiante")
                        .WithMany("Clases")
                        .HasForeignKey("EstudianteId")
                        .IsRequired()
                        .HasConstraintName("FK_Clase_Estudiante");

                    b.HasOne("UniversityApi.DataAccess.MateriaProfesor", "MateriaProfesor")
                        .WithMany("Clases")
                        .HasForeignKey("MateriaId", "ProfesorId")
                        .IsRequired()
                        .HasConstraintName("FK_Clase_MateriaProfesor");

                    b.Navigation("Estudiante");

                    b.Navigation("MateriaProfesor");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Estudiante", b =>
                {
                    b.HasOne("UniversityApi.DataAccess.Usuario", "EstudianteNavigation")
                        .WithOne("Estudiante")
                        .HasForeignKey("UniversityApi.DataAccess.Estudiante", "EstudianteId")
                        .IsRequired()
                        .HasConstraintName("FK_Estudiante_Usuario");

                    b.Navigation("EstudianteNavigation");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.MateriaProfesor", b =>
                {
                    b.HasOne("UniversityApi.DataAccess.Materia", "Materia")
                        .WithMany("MateriaProfesors")
                        .HasForeignKey("MateriaId")
                        .IsRequired()
                        .HasConstraintName("FK_MateriaProfesor_Materia");

                    b.HasOne("UniversityApi.DataAccess.Profesor", "Profesor")
                        .WithMany("MateriaProfesors")
                        .HasForeignKey("ProfesorId")
                        .IsRequired()
                        .HasConstraintName("FK_MateriaProfesor_Profesor");

                    b.Navigation("Materia");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Profesor", b =>
                {
                    b.HasOne("UniversityApi.DataAccess.Usuario", "ProfesorNavigation")
                        .WithOne("Profesor")
                        .HasForeignKey("UniversityApi.DataAccess.Profesor", "ProfesorId")
                        .IsRequired()
                        .HasConstraintName("FK_Profesor_Usuario");

                    b.Navigation("ProfesorNavigation");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Estudiante", b =>
                {
                    b.Navigation("Clases");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Materia", b =>
                {
                    b.Navigation("MateriaProfesors");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.MateriaProfesor", b =>
                {
                    b.Navigation("Clases");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Profesor", b =>
                {
                    b.Navigation("MateriaProfesors");
                });

            modelBuilder.Entity("UniversityApi.DataAccess.Usuario", b =>
                {
                    b.Navigation("Estudiante");

                    b.Navigation("Profesor");
                });
#pragma warning restore 612, 618
        }
    }
}
